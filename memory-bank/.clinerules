# Vein Diagram: Project Intelligence

## Project Patterns

### Naming Conventions
- **Frontend Components**: PascalCase (e.g., `BiomarkerVisualization.tsx`)
- **Frontend Utilities/Hooks**: camelCase (e.g., `useApiData.ts`)
- **Backend Modules/Files**: snake_case (e.g., `biomarker_parser.py`, `profile_model.py`)
- **API Endpoints**: Generally snake_case paths with parameters (e.g., `/api/profiles/{profile_id}/favorites`)
- **Frontend Services**: camelCase, often ending with 'Service' (e.g., `profileService.ts`, `healthScoreService.ts`)
- **Frontend Utils**: camelCase, often ending with 'Utils' (e.g., `favoritesUtils.ts`, `biomarkerUtils.ts`)
- **Frontend Health Score Components**: PascalCase, often descriptive (e.g., `HealthScoreOverview.tsx`, `ScoreDisplay.tsx`, `InfluencingFactors.tsx`)

### File Organization
- Frontend components are organized by feature/purpose (e.g., `pages/ProfileManagement.tsx`, `components/FavoriteBiomarkersGrid.tsx`).
- Backend follows a service-oriented architecture with clear separation (routes, services, models, schemas, config).
- Backend tests (`tests/`) mirror the `app/` structure (e.g., `tests/api/test_profile_routes.py`).
- Frontend tests are named with `.test.tsx` suffix and often co-located or in specific test folders.
- Utility functions are grouped by purpose (`frontend/src/utils/`).
- API services are grouped (`frontend/src/services/`).
- Configuration files (like `optimal_ranges.json`, `biomarker_aliases.json`) are stored in `backend/app/config/` or `backend/app/utils/`.

### Code Style
- TypeScript is used for all frontend code
- Python type hints are used throughout the backend
- React functional components with hooks are preferred.
- FastAPI dependency injection is used for service composition.
- TypeScript types are defined in `frontend/src/types/` (e.g., `healthScore.ts`).
- Backend uses Pydantic schemas (`backend/app/schemas/`) for API validation and serialization (e.g., `health_score_schema.py`).

## Development Workflow

### Local Development
- Backend server runs on port 8000 by default (`uvicorn app.main:app --reload`).
- Frontend development server runs on port 3000 (`npm run dev`).
- Frontend proxies API requests (`/api`) to the backend during development (likely configured in `vite.config.ts`).
- Python virtual environment (`backend/vein-d/`) is used for backend dependencies (`requirements.txt`).

### Testing Approach
- Unit tests for individual components (React Testing Library) and services.
- Integration tests for API endpoints (`pytest` with test client) and data flow.
- Specific tests exist for Profile and Favorite features (`test_profile_routes.py`, `ProfileManagement.test.tsx`).
- Sample PDF reports (`backend/sample_reports/`) are used for testing the extraction pipeline.
- Jest (`npm test`) is used for frontend testing.
- Pytest (`PYTHONPATH=backend pytest backend/tests/...`) is used for backend testing. Requires setting `PYTHONPATH` to resolve `app` module imports. Tests for Health Score feature need to be added.

## Critical Implementation Paths

### PDF Processing Pipeline (Refactored)
1. PDF upload via frontend (associating with a `profile_id`).
2. Storage in temporary location (`uploads/`).
3. Full text extraction from all pages (`pdf_service.extract_text_from_pdf`), returning `Dict[int, str]`. OCR fallback used if needed.
4. Metadata extraction (`metadata_parser.extract_metadata_with_claude`) using text from *initial pages* only.
5. Page filtering (`pdf_service.filter_relevant_pages`) based on relevance scoring (aliases, units, tables) using `biomarker_aliases.json`.
6. Sequential biomarker extraction (`pdf_service.process_pages_sequentially`) for *filtered pages*:
    - Calls `biomarker_parser.extract_biomarkers_with_claude` for each relevant page.
    - Handles timeouts/errors per page, potentially falling back to regex parser (`parse_biomarkers_from_text`) for that page.
    - Aggregates results.
7. Biomarker de-duplication (based on name, keeping first occurrence).
8. Biomarker standardization (`_process_biomarker`).
9. Storage in database (`PDF` metadata, `Biomarker` records linked to PDF and Profile).
10. Update PDF status (`processed` or `error`).

### Visualization Flow (with Profile & Favorites)
1. User selects an active profile.
2. User navigates to visualization/history page.
3. Frontend requests data from API, specifying the `profile_id` (e.g., `/api/profiles/{profile_id}/biomarkers`, `/api/profiles/{profile_id}/favorites`).
4. Backend retrieves and formats data filtered by the profile.
5. Backend retrieves favorite biomarkers for the profile.
6. Frontend renders visualization (D3.js) using profile-specific data, potentially highlighting favorites.
7. User interacts with visualization (zoom, filter, add/remove favorites).
8. Frontend requests Claude insights for specific biomarkers as needed.
9. Frontend requests Health Score for the active profile (`/api/health-score/{profile_id}`).
10. Backend calculates Health Score using profile's biomarkers and optimal ranges (`optimal_ranges.json`).
11. Frontend displays score, trend, influencing factors using dedicated components (`HealthScoreOverview.tsx`, etc.).

### Profile Management Flow
1. User navigates to Profile Management page.
2. Frontend requests list of profiles from `/api/profiles`.
3. User interacts to create/edit/delete profiles via frontend forms.
4. Frontend sends requests (POST/PUT/DELETE) to `/api/profiles` or `/api/profiles/{profile_id}`.
5. Backend updates database via Profile service/model logic.

### Health Score Calculation Flow
1. Frontend requests score for a profile from `/api/health-score/{profile_id}`.
2. Backend retrieves relevant biomarkers for the profile from the database.
3. Backend retrieves optimal ranges from `backend/app/config/optimal_ranges.json`.
4. Backend calculates score based on how biomarkers fall within/outside optimal ranges (specific logic in `health_score_service.py` - *needs verification*).
5. Backend determines key influencing factors (positive/negative).
6. Backend calculates trend based on historical scores (if available - *future enhancement?*).
7. Backend returns `HealthScoreResponse` to frontend.

## Known Challenges

### PDF Extraction Complexity
- Different lab providers use vastly different formats
- Some PDFs contain images that require OCR
- Table structures vary significantly between providers
- Reference ranges may be presented inconsistently
- Page filtering based on relevance scoring is heuristic and may miss/include pages incorrectly.

### Biomarker Standardization
- Same biomarker may have different names across labs
- Units of measurement may vary (e.g., mg/dL vs. mmol/L)
- Reference ranges differ between labs and patient demographics
- Some biomarkers have complex relationships that are difficult to visualize

### Performance Considerations
- PDF processing is CPU-intensive (mitigated by background tasks).
- Large datasets per profile impact visualization performance (mitigated by sampling, optimization).
- Frequent profile switching might require frontend state/caching optimization.
- Claude API calls need efficient management (caching insights, sequential processing helps avoid large timeouts but adds per-page latency).
- Health Score calculation could be slow for profiles with extensive history (mitigated by optimization, caching).
- Defining "optimal" ranges and score weighting requires careful consideration and may need user customization later.

## User Preferences

### Visualization Preferences
- Clean, minimalist design with focus on data clarity
- Color schemes should be meaningful (e.g., red for out-of-range values)
- Interactive elements should be intuitive and discoverable
- Mobile experience should prioritize key insights over comprehensive data

### Feature Priorities
- Accuracy of biomarker extraction remains highest priority.
- **Profile management and data isolation per profile** are critical.
- **Favorite biomarker functionality** enhances personalization.
- Time-series visualization (per profile) is essential.
- Relationship mapping and Claude insights add significant value.
- **Health Score calculation** provides an at-a-glance summary.

## Evolution of Project Decisions

### Initial Approach vs. Current Direction
- Started with general PDF extraction, moving toward lab-specific adapters/robust LLM prompts.
- Initially planned simple visualizations, now focusing on interactive and insightful displays (D3.js).
- Originally considered basic biomarker information, now incorporating Claude API for deeper insights.
- Initially focused on single-user context, **now supporting multiple profiles**.
- Added **favorite biomarker tracking** for personalization.
- Added **Health Score feature** for overall wellness tracking.
- Progressing towards better mobile responsiveness.
- **Refactored PDF processing** to use page filtering and sequential Claude calls to improve efficiency and avoid timeouts.

## Tool Usage Patterns

### Development Tools
- VSCode is the primary IDE
- Git for version control
- npm for frontend package management
- pip for backend package management

### Testing Tools
- Jest & React Testing Library (`npm test`) for frontend tests.
- pytest (`PYTHONPATH=backend pytest backend/tests/...`) for backend tests (needs Health Score tests). Requires `PYTHONPATH` set.
- VSCode testing integrations might be used.
- Chrome DevTools for frontend debugging.
- Backend logging (`backend/logs/`) for debugging.

### Deployment Considerations
- Frontend can be deployed to static hosting (Netlify, Vercel)
- Backend requires Python runtime environment
- Database needs to be provisioned separately
- PDF processing may benefit from worker processes for scalability
