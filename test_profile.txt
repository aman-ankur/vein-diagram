============================= test session starts ==============================
platform darwin -- Python 3.9.6, pytest-7.4.3, pluggy-1.5.0
rootdir: /Users/aankur/workspace/vein-diagram
plugins: asyncio-0.23.5, cov-6.0.0, anyio-4.8.0
asyncio: mode=strict
collected 4 items

backend/tests/services/test_profile_service.py FFF.                      [100%]

=================================== FAILURES ===================================
_________________________ test_merge_profiles_success __________________________

mock_db_session = <MagicMock spec='Session' id='5758119888'>
target_profile = <Profile Target Profile (549f8737-a1b5-4bdd-a99e-91bc78b1ef3e)>
source_profile_1 = <Profile Source Profile 1 (4f020391-d9c4-4056-9237-a74f2c63c11d)>
source_profile_2 = <Profile Source Profile 2 (7a8b9d2c-c94c-4cc6-b279-89392c130909)>

    def test_merge_profiles_success(mock_db_session, target_profile, source_profile_1, source_profile_2):
        """Tests a successful merge of two source profiles into a target profile."""
    
        # Arrange
        source_ids = [source_profile_1.id, source_profile_2.id]
        target_id = target_profile.id
        merge_request = ProfileMergeRequest(source_profile_ids=source_ids, target_profile_id=target_id)
    
        # Mock DB query results more directly
        mock_target_query = MagicMock()
        mock_target_query.first.return_value = target_profile
    
        mock_source_query = MagicMock()
        mock_source_query.all.return_value = [source_profile_1, source_profile_2]
    
        mock_biomarker_query = MagicMock()
        mock_biomarker_query.join.return_value = mock_biomarker_query
        mock_biomarker_query.filter.return_value = mock_biomarker_query
        mock_biomarker_query.order_by.return_value = mock_biomarker_query
        mock_biomarker_query.all.return_value = [] # No duplicates for this test
    
        # Configure the main query mock
        def query_side_effect(model):
            if model == Profile:
                # Crude way to distinguish target vs source query based on call order in this test
                if mock_db_session.query.call_count == 1: # First call is for target
                    return MagicMock(filter=MagicMock(return_value=mock_target_query))
                elif mock_db_session.query.call_count == 2: # Second call is for sources
                    return MagicMock(filter=MagicMock(return_value=mock_source_query))
            elif model == Biomarker.id: # Third call is for biomarker dedupe
                 return mock_biomarker_query
            # Fallback for any other unexpected query
            return MagicMock()
    
        mock_db_session.query.side_effect = query_side_effect
        mock_db_session.query.call_count = 0 # Reset count for side effect logic
    
        # Mock execute results for update/delete rowcounts
        mock_db_session.execute.side_effect = [
            MagicMock(rowcount=5), # Biomarker update
            MagicMock(rowcount=2), # PDF update
            MagicMock(rowcount=0), # Duplicate biomarker delete (none found)
            MagicMock(rowcount=2)  # Profile delete
        ]
    
        # Act
        merge_profiles(db=mock_db_session, merge_request=merge_request)
    
        # Assert
        # Check validation queries (Target profile + Source profiles = 2 calls minimum)
        # The deduplication query might not run if no biomarkers are found after re-association in the test setup.
        assert mock_db_session.query.call_count >= 2 # Target + Source queries minimum
    
        # Check that execute was called for the updates and deletes
        # Expecting 4 execute calls: Biomarker Update, PDF Update, Duplicate Delete, Profile Delete
>       assert mock_db_session.execute.call_count == 4
E       AssertionError: assert 2 == 4
E        +  where 2 = <MagicMock name='mock.execute' id='5759871584'>.call_count
E        +    where <MagicMock name='mock.execute' id='5759871584'> = <MagicMock spec='Session' id='5758119888'>.execute

backend/tests/services/test_profile_service.py:121: AssertionError
----------------------------- Captured stderr call -----------------------------
INFO:app.services.profile_service:Validating profiles: Target=549f8737-a1b5-4bdd-a99e-91bc78b1ef3e, Sources=[UUID('4f020391-d9c4-4056-9237-a74f2c63c11d'), UUID('7a8b9d2c-c94c-4cc6-b279-89392c130909')]
INFO:app.services.profile_service:Validation successful.
INFO:app.services.profile_service:Re-associating data from sources [UUID('4f020391-d9c4-4056-9237-a74f2c63c11d'), UUID('7a8b9d2c-c94c-4cc6-b279-89392c130909')] to target 549f8737-a1b5-4bdd-a99e-91bc78b1ef3e
INFO:app.services.profile_service:Updated 5 biomarker records.
INFO:app.services.profile_service:Updated 2 PDF records.
INFO:app.services.profile_service:Starting deduplication for target profile 549f8737-a1b5-4bdd-a99e-91bc78b1ef3e
------------------------------ Captured log call -------------------------------
INFO     app.services.profile_service:profile_service.py:41 Validating profiles: Target=549f8737-a1b5-4bdd-a99e-91bc78b1ef3e, Sources=[UUID('4f020391-d9c4-4056-9237-a74f2c63c11d'), UUID('7a8b9d2c-c94c-4cc6-b279-89392c130909')]
INFO     app.services.profile_service:profile_service.py:52 Validation successful.
INFO     app.services.profile_service:profile_service.py:65 Re-associating data from sources [UUID('4f020391-d9c4-4056-9237-a74f2c63c11d'), UUID('7a8b9d2c-c94c-4cc6-b279-89392c130909')] to target 549f8737-a1b5-4bdd-a99e-91bc78b1ef3e
INFO     app.services.profile_service:profile_service.py:74 Updated 5 biomarker records.
INFO     app.services.profile_service:profile_service.py:83 Updated 2 PDF records.
INFO     app.services.profile_service:profile_service.py:86 Starting deduplication for target profile 549f8737-a1b5-4bdd-a99e-91bc78b1ef3e
_____________________ test_merge_profiles_target_not_found _____________________

mock_db_session = <MagicMock spec='Session' id='5761067952'>
source_profile_1 = <Profile Source Profile 1 (865ebfe8-c769-4fb9-a036-f072764abd3f)>

    def test_merge_profiles_target_not_found(mock_db_session, source_profile_1):
        """Tests error handling when the target profile does not exist."""
    
        # Arrange
        source_ids = [source_profile_1.id]
        target_id = uuid4() # Non-existent target
        merge_request = ProfileMergeRequest(source_profile_ids=source_ids, target_profile_id=target_id)
    
        # Mock DB query results specifically for this test
        # Mock the chain: query(Profile).filter(...).first() -> None
        mock_db_session.query.return_value.filter.return_value.first.return_value = None
    
        # Act & Assert
        with pytest.raises(HTTPException) as exc_info:
>           merge_profiles(db=mock_db_session, merge_request=merge_request)
E           Failed: DID NOT RAISE <class 'fastapi.exceptions.HTTPException'>

backend/tests/services/test_profile_service.py:143: Failed
----------------------------- Captured stderr call -----------------------------
INFO:app.services.profile_service:Validating profiles: Target=05a4ebab-13ee-4709-9d4a-071d1510decd, Sources=[UUID('865ebfe8-c769-4fb9-a036-f072764abd3f')]
------------------------------ Captured log call -------------------------------
INFO     app.services.profile_service:profile_service.py:41 Validating profiles: Target=05a4ebab-13ee-4709-9d4a-071d1510decd, Sources=[UUID('865ebfe8-c769-4fb9-a036-f072764abd3f')]
_____________________ test_merge_profiles_source_not_found _____________________

mock_db_session = <MagicMock spec='Session' id='5761289424'>
target_profile = <Profile Target Profile (77c47954-67f1-496c-ad79-b6ec295668c9)>
source_profile_1 = <Profile Source Profile 1 (65c194d4-db14-47e4-b484-bc8a75caf922)>

    def test_merge_profiles_source_not_found(mock_db_session, target_profile, source_profile_1):
        """Tests error handling when one of the source profiles does not exist."""
    
        # Arrange
        missing_source_id = uuid4()
        source_ids = [source_profile_1.id, missing_source_id]
        target_id = target_profile.id
        merge_request = ProfileMergeRequest(source_profile_ids=source_ids, target_profile_id=target_id)
    
        # Mock DB query results specifically for this test
        mock_target_query = MagicMock()
        mock_target_query.first.return_value = target_profile # Target exists
    
        mock_source_query = MagicMock()
        mock_source_query.all.return_value = [source_profile_1] # Return only one source, simulating missing one
    
        # Configure the main query mock using side_effect for sequence
    
        # Mock the chain query(Profile).filter(...).first() -> target_profile
        mock_filter_target = MagicMock()
        mock_filter_target.first.return_value = target_profile
    
        # Mock the chain query(Profile).filter(...).all() -> [source_profile_1]
        mock_filter_source = MagicMock()
        mock_filter_source.all.return_value = [source_profile_1] # Incomplete list
    
        # Set up side_effect on the query mock itself
        mock_db_session.query.side_effect = [
            MagicMock(filter=MagicMock(return_value=mock_filter_target)), # First call to query(Profile)
            MagicMock(filter=MagicMock(return_value=mock_filter_source))  # Second call to query(Profile)
        ]
    
        # Act & Assert
        with pytest.raises(HTTPException) as exc_info:
>           merge_profiles(db=mock_db_session, merge_request=merge_request)
E           Failed: DID NOT RAISE <class 'fastapi.exceptions.HTTPException'>

backend/tests/services/test_profile_service.py:184: Failed
----------------------------- Captured stderr call -----------------------------
INFO:app.services.profile_service:Validating profiles: Target=77c47954-67f1-496c-ad79-b6ec295668c9, Sources=[UUID('65c194d4-db14-47e4-b484-bc8a75caf922'), UUID('96aebb73-84f0-4c45-9956-5a7f74d3c39b')]
------------------------------ Captured log call -------------------------------
INFO     app.services.profile_service:profile_service.py:41 Validating profiles: Target=77c47954-67f1-496c-ad79-b6ec295668c9, Sources=[UUID('65c194d4-db14-47e4-b484-bc8a75caf922'), UUID('96aebb73-84f0-4c45-9956-5a7f74d3c39b')]
=============================== warnings summary ===============================
backend/app/db/database.py:18
  /Users/aankur/workspace/vein-diagram/backend/app/db/database.py:18: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

backend/vein-d/lib/python3.9/site-packages/PyPDF2/__init__.py:21
  /Users/aankur/workspace/vein-diagram/backend/vein-d/lib/python3.9/site-packages/PyPDF2/__init__.py:21: DeprecationWarning: PyPDF2 is deprecated. Please move to the pypdf library instead.
    warnings.warn(

backend/vein-d/lib/python3.9/site-packages/urllib3/__init__.py:35
  /Users/aankur/workspace/vein-diagram/backend/vein-d/lib/python3.9/site-packages/urllib3/__init__.py:35: NotOpenSSLWarning: urllib3 v2 only supports OpenSSL 1.1.1+, currently the 'ssl' module is compiled with 'LibreSSL 2.8.3'. See: https://github.com/urllib3/urllib3/issues/3020
    warnings.warn(

backend/vein-d/lib/python3.9/site-packages/pydantic/_internal/_config.py:272
backend/vein-d/lib/python3.9/site-packages/pydantic/_internal/_config.py:272
backend/vein-d/lib/python3.9/site-packages/pydantic/_internal/_config.py:272
backend/vein-d/lib/python3.9/site-packages/pydantic/_internal/_config.py:272
backend/vein-d/lib/python3.9/site-packages/pydantic/_internal/_config.py:272
backend/vein-d/lib/python3.9/site-packages/pydantic/_internal/_config.py:272
  /Users/aankur/workspace/vein-diagram/backend/vein-d/lib/python3.9/site-packages/pydantic/_internal/_config.py:272: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.6/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

backend/vein-d/lib/python3.9/site-packages/pydantic/_internal/_config.py:322
  /Users/aankur/workspace/vein-diagram/backend/vein-d/lib/python3.9/site-packages/pydantic/_internal/_config.py:322: UserWarning: Valid config keys have changed in V2:
  * 'orm_mode' has been renamed to 'from_attributes'
    warnings.warn(message, UserWarning)

backend/app/db/session.py:18
  /Users/aankur/workspace/vein-diagram/backend/app/db/session.py:18: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

backend/app/main.py:45
  /Users/aankur/workspace/vein-diagram/backend/app/main.py:45: DeprecationWarning: 
          on_event is deprecated, use lifespan event handlers instead.
  
          Read more about it in the
          [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
          
    @app.on_event("startup")

backend/vein-d/lib/python3.9/site-packages/fastapi/applications.py:4495
  /Users/aankur/workspace/vein-diagram/backend/vein-d/lib/python3.9/site-packages/fastapi/applications.py:4495: DeprecationWarning: 
          on_event is deprecated, use lifespan event handlers instead.
  
          Read more about it in the
          [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
          
    return self.router.on_event(event_type)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED backend/tests/services/test_profile_service.py::test_merge_profiles_success
FAILED backend/tests/services/test_profile_service.py::test_merge_profiles_target_not_found
FAILED backend/tests/services/test_profile_service.py::test_merge_profiles_source_not_found
=================== 3 failed, 1 passed, 13 warnings in 0.11s ===================
